@model X.PagedList.IPagedList<BasePackageModule2.Models.Product>
@using X.PagedList.Mvc.Core


<div class="container">
    <div class="row">
        @foreach (var item in Model)
        {
            <div class="col-sm-12 col-md-4 col-lg-4 mt-2">
                <div class="card">
                    <img class="card-img-top" src="@item.Image" alt="Card image cap">
                    <div class="card-body">
                        <a asp-action="Details" asp-controller="Products" asp-route-id="@item.Id">
                            <h6 class="card-title text-center">@item.Name</h6>
                            @*<h4 class="text-center">Rs.@item.FinalPrice</h4>*@
                        </a>
                        <p class="text-center"> <a asp-action="Details" class="btn text-center mt-3 mb-2"  asp-controller="Products" asp-route-id="@item.Id">Read More !</a></p>
                    </div>
                </div>

            </div>
        }
    </div>
</div>


<div class="container">
    <div class="row">
        <div class="col-sm-12 col-md-6 col-lg-6 ml-auto mr-auto">
            <nav class="m-5 paging" style="text-align: center">
                @Html.PagedListPager(Model, pageindex => Url.Action("Index", new { pageindex, pageSize = ViewBag.PerPageItems, orderby = ViewBag.orderby, ViewBag.category }), new X.PagedList.Mvc.Core.Common.PagedListRenderOptions { LiElementClasses = new string[] { "page-item" }, PageClasses = new string[] { "page-link" } })
            </nav>
        </div>
    </div>
</div>
    @*<section class="section section-dark section-resume" id="resume">
        <div class="container">
            <div class="section-head">

                <h2 class="d-none">My Expertises</h2>
            </div>

            <div class="row ">
                @foreach (var item in Model)
                {
                    <div class="col-sm-12 col-md-6 mt-2">
                        <div class="card">
                            <img class="card-img-top" src="@item.Image" alt="Card image cap">
                            <div class="card-body">
                                <a asp-action="Details" asp-controller="Products" asp-route-id="@item.Id">
                                    <h6 class="card-title text-center">@item.Name</h6>
                                    <h4 class="text-center">Rs.@item.FinalPrice</h4>
                                </a>
                                <p class="text-center"> <a asp-action="Details" class="btn text-center mt-3 mb-2" style="background-color:#121234;" asp-controller="Products" asp-route-id="@item.Id">Shop Now</a></p>
                            </div>
                        </div>

                    </div>
                }



            </div>

            <nav class="m-5" style="text-align: center">
                @Html.PagedListPager(Model, pageindex => Url.Action("Index", new { pageindex, pageSize = ViewBag.PerPageItems, orderby = ViewBag.orderby }), new X.PagedList.Mvc.Core.Common.PagedListRenderOptions { LiElementClasses = new string[] { "page-item" }, PageClasses = new string[] { "page-link" } })
            </nav>
        </div>
    </section>*@


    @*<div class="container mt-5">
        <div class="row">

            <aside class="col-md-3 sidebar">
                @if (Model.Any())
                {
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Price range</h5>
                            <form method="get">
                                <input type="text" class="js-range-slider"
                                       data-type="double"
                                       data-min="50"
                                       data-max="20000"
                                       data-from="@ViewBag.minPrice"
                                       data-to="@ViewBag.maxPrice"
                                       data-grid="false" />
                                <input type="hidden" id="min_price" name="minPrice" value="@ViewBag.minPrice">
                                <input type="hidden" id="max_price" name="maxPrice" value="@ViewBag.maxPrice">
                                <input type="hidden" name="category" value="@ViewBag.category" />
                                <button type="submit" class="btn btn-block btn-primary mt-4">Apply</button>
                            </form>
                        </div>
                    </div>
                }
                @await Component.InvokeAsync("Category")
            </aside>
            <aside class="col-md-9">
                @if (Model.Any())
                {
                    <partial name="_ItemAreaPartial" model="Model" />

                    <nav class="m-5" style="text-align: center">
                        @Html.PagedListPager(Model, pageindex => Url.Action("Index", new { pageindex, pageSize = ViewBag.PerPageItems, orderby = ViewBag.orderby }), new X.PagedList.Mvc.Core.Common.PagedListRenderOptions { LiElementClasses = new string[] { "page-item" }, PageClasses = new string[] { "page-link" } })
                    </nav>
                }
                else
                {
                    <div class="container mt-5">
                        <div class="row">
                            <aside class="col-md-12">
                                <h3>No Results Found!</h3>
                            </aside>
                        </div>
                    </div>
                }
            </aside>

        </div>
    </div>*@


@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.3.1/css/ion.rangeSlider.min.css" />

}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.3.1/js/ion.rangeSlider.min.js"></script>


    <script>

        $(".js-range-slider").ionRangeSlider({
            skin: "big",
            onStart: function (data) {
                $('#min_price').val(data.from);
                $('#max_price').val(data.to);
            },
            onChange: function (data) {
                //console.dir(data);
                $('#min_price').val(data.from);
                $('#max_price').val(data.to);
            }
        });

    </script>
}